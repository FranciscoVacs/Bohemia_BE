// services/PDFGenerator.service.ts
import PDFDocument from 'pdfkit';
import QRCode from 'qrcode';
import type { Ticket } from '../entities/ticket.entity.js';

export class PDFGenerator {
async generateTicketPDF(ticket: Ticket): Promise<Buffer> {
    const doc = new PDFDocument({
      size: [300, 400], // Tamaño más pequeño, similar a un ticket físico
      margin: 20
    });

    const chunks: Buffer[] = [];
    doc.on('data', (chunk) => chunks.push(chunk));

    // Configurar fuente y estilos
    doc.font('Helvetica-Bold');
    
    // Nombre del evento en mayúsculas y negrita
    doc.fontSize(14)
       .text(ticket.ticketType.event.event_name.toUpperCase(), {
         align: 'left',
         lineGap: 2
       });

    // Código del ticket
    doc.fontSize(12)
       .text(ticket.qr_code, {
         align: 'left',
         lineGap: 5
       });

    // Fecha y hora del evento
    const datetimeEvent = ticket.ticketType.event.begin_datetime.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    
    doc.text(`${datetimeEvent}`, {
      align: 'left',
      lineGap: 5
    });

    // Lugar del evento
    doc.text(ticket.ticketType.event.location.address, {
      align: 'left',
      lineGap: 5
    });

    // Tipo de entrada y precio
    doc.text(`${ticket.ticketType.ticketType_name} - ${ticket.ticketType.price.toFixed(2)}`, {
      align: 'left',
      lineGap: 5
    });

    // Número de operación/ticket
    doc.text(ticket.nro_en_compra.toString().padStart(12, '0'), {
      align: 'left',
      lineGap: 5
    });

    // Fecha y hora de compra
    const fechaCompra = new Date().toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: '2-digit'
    });
    
    const horaCompra = new Date().toLocaleTimeString('es-ES', {
      hour: '2-digit',
      minute: '2-digit'
    });

    doc.text(`${fechaCompra} ${horaCompra}`, {
      align: 'left',
      lineGap: 5
    });

    // Usuario que generó el ticket
    doc.text('SYSTEM_ADM', {
      align: 'left',
      lineGap: 10
    });

    // QR code al final
    const qrCodeDataUrl = await QRCode.toDataURL(ticket.codigo_qr);
    doc.image(qrCodeDataUrl, {
      fit: [100, 100],
      align: 'center'
    });

    doc.end();

    return new Promise((resolve) => {
      doc.on('end', () => {
        resolve(Buffer.concat(chunks));
      });
    });
  }
}